import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

class NextSentencePredictor:
    def __init__(self, model_path):
        """
        Initialize the predictor with a trained model and tokenizer.

        :param model_path: Path to the custom-trained AI model.
        """
        self.model_path = model_path
        self.tokenizer = AutoTokenizer.from_pretrained(model_path)
        self.model = AutoModelForCausalLM.from_pretrained(model_path)

    def predict_next_sentence(self, context, max_length=50, temperature=0.7):
        """
        Predict the next sentence based on the given context.

        :param context: Input text serving as the context.
        :param max_length: Maximum number of tokens for the generated text.
        :param temperature: Controls randomness in text generation (lower is deterministic).
        :return: Predicted next sentence.
        """
        # Tokenize the input context
        input_ids = self.tokenizer.encode(context, return_tensors="pt")

        # Generate the next sentence using the model
        output = self.model.generate(
            input_ids,
            max_length=len(input_ids[0]) + max_length,
            temperature=temperature,
            num_return_sequences=1,
            pad_token_id=self.tokenizer.eos_token_id,
            do_sample=True,
            top_k=50,
            top_p=0.95
        )

        # Decode and extract the next sentence
        generated_text = self.tokenizer.decode(output[0], skip_special_tokens=True)
        next_sentence = self._extract_next_sentence(context, generated_text)
        return next_sentence

    def _extract_next_sentence(self, context, generated_text):
        """
        Extract the next sentence from the generated text, excluding the input context.

        :param context: Original input context.
        :param generated_text: Full text generated by the model.
        :return: The next sentence as a string.
        """
        generated_text = generated_text[len(context):].strip()
        sentences = generated_text.split('. ')
        return sentences[0].strip() + '.' if sentences else "No sentence generated."

# Example Usage
if __name__ == "__main__":
    # Path to the custom-trained AI model
    model_path = "path_to_trained_model"

    # Initialize the predictor
    predictor = NextSentencePredictor(model_path)

    # Example context
    context = "The sun was setting over the horizon, painting the sky in hues of orange and purple."

    # Predict the next sentence
    next_sentence = predictor.predict_next_sentence(context)
    print("Next Sentence:", next_sentence)
